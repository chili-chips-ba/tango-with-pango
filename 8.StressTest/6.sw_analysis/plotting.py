# 4×4 bit arrangement from your image:
#
#  ┌────┬────┬────┬────┐
#  │B12 │B14 │B10 │B8  │
#  ├────┼────┼────┼────┤
#  │B13 │B15 │B11 │B9  │
#  ├────┼────┼────┼────┤
#  │B5  │B7  │B3  │B1  │
#  ├────┼────┼────┼────┤
#  │B4  │B6  │B2  │B0  │
#  └────┴────┴────┴────┘
#
# For a 16-bit integer, bit 0 is the least-significant bit, bit 15 is the most-significant.

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

# Put your entire list of numbers here:
numbers = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
    4113, 4112, 61455, 57358, 53261, 32, 8224, 34, 8226, 65535,
    48, 12336, 4080, 51, 12339, 64, 2048, 16448, 68, 16452, 80,
    20560, 85, 20565, 96, 24672, 102, 24678, 2056, 112, 28784,
    119, 34936, 34935, 28791, 30839, 30840, 4095, 34944, 128,
    32896, 2176, 4096, 4097, 34951, 34952, 136, 32904, 30855,
    2184, 30856, 63624, 34959, 144, 37008, 63631, 153, 37017,
    160, 41120, 170, 41130, 176, 45232, 8177, 187, 45243, 192,
    49344, 204, 49356, 208, 53456, 221, 53469, 224, 57568, 238,
    57582, 240, 61680, 35064, 63736, 8191, 61695, 63743, 255,
    4353, 4352, 256, 257, 35071, 2304, 39168, 39177, 2313, 8194,
    4368, 4369, 272, 273, 57617, 61713, 4382, 4383, 57630, 61727,
    12274, 39270, 26982, 39273, 26985, 12287, 12288, 39312, 12291,
    2448, 39318, 27030, 39321, 2457, 27033, 63897, 39327, 63903,
    16371, 4577, 57825, 57838, 4590, 4593, 61937, 39417, 63993,
    16383, 4607, 512, 2560, 39423, 8704, 8706, 43520, 61951,
    63999, 514, 16384, 43530, 2570, 16388, 8736, 544, 8738, 546,
    53794, 61986, 8749, 53805, 8751, 61999, 20468, 43605, 23125,
    43610, 23130, 20479, 20480, 20485, 43680, 2720, 43685, 23205,
    43690, 2730, 23210, 64170, 43695, 64175, 24565, 8914, 53970,
    8925, 53981, 65278, 8946, 62194, 43770, 64250, 24575, 43775,
    62207, 13056, 64255, 47872, 13059, 8959, 768, 2816, 771, 24576,
    47883, 2827, 24582, 13104, 816, 13107, 819, 49971, 62259,
    13116, 49980, 13119, 62271, 47940, 19268, 47947, 19275, 28662,
    28671, 28672, 28679, 48048, 2992, 48052, 19380, 48059, 3003,
    19387, 64443, 48063, 64447, 13251, 50115, 13260, 50124, 32759,
    13299, 62451, 48123, 64507, 32767, 13311, 17408, 1024, 52224,
    3072, 17412, 62463, 48127, 64511, 1028, 32768, 52236, 3084,
    32776, 52275, 15411, 52284, 15420, 17472, 34816, 1088, 17476,
    1092, 46148, 62532, 17483, 46155, 17487, 62543, 36856, 34824,
    36863, 36864, 36873, 17588, 46260, 17595, 46267, 52416, 3264,
    52419, 15555, 52428, 3276, 15564, 52431, 64719, 64716, 40953,
    17652, 62708, 40959, 52476, 64764, 62719, 64767, 56576, 17663,
    1280, 52479, 21765, 3328, 21760, 1285, 40960, 56589, 3341,
    8192, 63351, 56610, 11554, 56621, 11565, 40970, 21840, 1360,
    21845, 1365, 42325, 62805, 21850, 42330, 21855, 62815, 45050,
    45055, 45056, 21925, 42405, 21930, 42410, 45067, 56784, 3536,
    56786, 11730, 56797, 3549, 56799, 64991, 11741, 64989, 49147,
    22005, 62965, 49151, 56829, 65021, 22015, 1536, 3584, 56831,
    26112, 60928, 62975, 26118, 65023, 1542, 49152, 60942, 3598,
    60945, 7697, 60958, 7710, 49164, 26208, 1632, 26214, 1638,
    38502, 26217, 38505, 63078, 53244, 26223, 63087, 53247, 53248,
    26262, 38550, 26265, 38553, 61152, 61153, 3808, 7905, 61166,
    61167, 65263, 57341, 3822, 7918, 65262, 26358, 63222, 57343,
    61182, 26367, 63231, 30464, 65279, 65280, 61183, 1792, 3840,
    30471, 1799, 57344, 65295, 3855, 65297, 7953, 65311, 7967,
    65314, 12066, 61423, 65327, 12079, 65331, 16179, 65343, 16191,
    65348, 20292, 65359, 20303, 65365, 24405, 65375, 24415, 65382,
    28518, 65391, 30576, 28527, 1904, 61438, 30583, 30584, 65399,
    32631, 34680, 61439, 1911, 34679, 30591, 65407, 32639, 63359,
    61440, 30599, 30600, 65416, 34696, 36744, 34695, 65423, 36751,
    63479, 65433, 40857, 65439, 40863, 65450, 44970, 65455, 44975,
    65467, 49083, 63487, 65471, 49087, 65484, 53196, 65487, 53199,
    65527, 65528, 65501, 57309, 65503, 57311, 61422, 65518, 65519,
    65520, 65521, 65522, 65523, 65524, 65525, 30711, 65526, 65529,
    65530, 65531, 65532, 65533, 65534, 30719
]

# This 2D list matches your image’s layout of bits:
bit_layout = [
    [12, 14, 10,  8],
    [13, 15, 11,  9],
    [ 5,  7,  3,  1],
    [ 4,  6,  2,  0]
]

# Create a multi-page PDF to hold all tables
pdf_file = PdfPages("bit_tables.pdf")

for num in numbers:
    fig, ax = plt.subplots(figsize=(4, 2.5))  # adjust as you like
    ax.set_axis_off()
    
    # Build table data, row by row
    table_data = []
    for row in range(4):
        row_values = []
        for col in range(4):
            bit_index = bit_layout[row][col]
            # Check if that bit is set in 'num'
            bit_value = (num >> bit_index) & 1
            row_values.append(f"{bit_value}")
        table_data.append(row_values)
    
    # Draw the table in Matplotlib
    tbl = ax.table(
        cellText=table_data,
        loc='center',
        cellLoc='center'
    )
    ax.set_title(f"Number: {num} (0x{num:04X})", pad=10)
    
    # Make cells a bit bigger
    for key, cell in tbl.get_celld().items():
        cell.set_width(0.2)
        cell.set_height(0.3)

    # Save this figure as one page in the PDF
    pdf_file.savefig(fig)
    plt.close(fig)

pdf_file.close()

print("Done! Created bit_tables.pdf with one page per number.")
